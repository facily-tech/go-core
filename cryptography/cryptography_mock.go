// Code generated by MockGen. DO NOT EDIT.
// Source: ./cryptography/cryptography.go

// Package cryptography is a generated GoMock package.
package cryptography

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICryptography is a mock of ICryptography interface.
type MockICryptography struct {
	ctrl     *gomock.Controller
	recorder *MockICryptographyMockRecorder
}

// MockICryptographyMockRecorder is the mock recorder for MockICryptography.
type MockICryptographyMockRecorder struct {
	mock *MockICryptography
}

// NewMockICryptography creates a new mock instance.
func NewMockICryptography(ctrl *gomock.Controller) *MockICryptography {
	mock := &MockICryptography{ctrl: ctrl}
	mock.recorder = &MockICryptographyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICryptography) EXPECT() *MockICryptographyMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockICryptography) Decrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockICryptographyMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockICryptography)(nil).Decrypt), arg0)
}

// Encrypt mocks base method.
func (m *MockICryptography) Encrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockICryptographyMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockICryptography)(nil).Encrypt), arg0)
}
